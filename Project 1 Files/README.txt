Winston Shih
CS3345.005
2/24/2025
CS 3345.005 Project 1 README Documentation
        For this Singly Linked List project, Eclipse IDE was used because it was one of the IDEs that the project instructions mentioned was acceptable to use. To execute the Java files, you need to open the Eclipse IDE desktop app. You have to ensure the classes are added to package cs3345 so files can execute. You can create the package by creating a new Java project called cs3345 and then creating a new package called cs3345. After creating that a java class and java package, you create ProductSinglyNode, ProductSinglyList, ProductTester, and Product classes and IDedObject interface classes in that package and post the code from the submitted files into your version of the files. The files need the package to be cs3345 for the code to work. After having the Java files in the IDE, the user should press the run button for the ProductTester class because it is the class with the main method to execute the Product Tracker program.
        After the user presses the run button and selects the ProductTester Java class to run, the console prints out the list of product operation options you can input. There are 7 options: make empty(1), find ID(2), insert at front(3), delete from front(4), delete ID(5), print all records(6), and done(7). If a user inputs a number greater than 7, the console prints that the input is invalid and enters a valid option. If the user inputs a non-integer value, then the program catches the Input Mismatch Exception and forces the user to input a valid input with integer type. 
If the user presses 3, then they are prompted to type in an integer value for product ID. If the user inputs a non-integer value, then the program tells the user that the product ID is invalid and will prompt the user to enter another ID. The program will catch the InputMismatchException if the input is not an integer. After the user inputs an integer for product ID, then they enter a product name and supplier name to be associated with that product ID. After the user enters the product name and ID, the program will use the setID, setProductName, and setSupplierName methods to add the user’s inputs into a new Product object called p3. The program will invoke the insertAtFront method from the ProductSinglyList class that will check to see if the product ID of node p3 already exists in the linked list. If the product’s ID is on the singly linked node list, then the program will not add the product ID and will tell the user that the product ID already exists. If productID is not on the linked list, then the object will be placed in a ProductSinglyNode node at the front of the list and the console will print out that the node is added. If the list is initially empty, then the new node will be the only node in the list. 
If the user presses option 1, the program invokes the makeEmpty method from the ProductSinglyList class, which sets the linked list’s head value from the ProductSinglyNode class to null and makes the entire list empty. If the user presses option 2 and enters an ID that is on the linked list, then the program will invoke the findID method from the ProductSingly List. If the findID method finds a node with the same ID as the ID in the parameter, then it will print out the ID, product name, and supplier name associated with the ID. If the ID is not on a linked list, the user will get a message saying the ID is not found after inputting 2 for operation choice. The program will catch the Null Pointer Exception if the ID is not found. If the user inputs option 4, then the program will invoke the deleteFromFront method from ProductSinglyList, which will return the first node and print that the first item was deleted if the list is not empty using the printID method from Product class. If the linked list is already empty, then the program will say the linked list is empty after the user enters 4 in the console. The program will also catch NullPointerException.
If the user inputs option 5, then they will be prompted to input a product ID. If the productID input is not an integer, the program will repeat that the user needs to input an integer number as productID. Once the program confirms that the product ID is an integer, the program will prompt for the product name and supplier name. After the user inputs the product name and supplier name, the program will invoke the delete method from the ProductSinglyList class to check to see if the product ID matches a ProductSinglyNode’s data’s product ID on the linked list called l. If the ID is on the Singly Linked List, then the node with the ID will be removed from the product singly list l and the program will invoke printID from the Product class to print out the deleted node. If the ID is not on the list, then the program will say the ID was not on the linked list and will catch the NullPointerException. 
If the user inputs option 6, the program will invoke the printAllRecords method from the ProductSinglyList class to print all list elements’ product ID, supplier name, and product name. The printAllRecords method will invoke the IDedObject Product class’s printID method to print the product ID, product name, and supplier name for each node in the list. The Product class’ printID implements the public interface class IDedObject’s abstract function called printID and invokes the Product class’ getter method for product ID, printProductName, and printSupplierName methods. If the list is empty, the program will say that the list is empty. The getter method is the Product class’ implementation of the IDedObject interface’s abstract function getID. If the user wants to end the program, they can input option 7. After the user inputs option 7, the program breaks the do while that prompts the user to keep entering the operation option and prints done to signal the end of the program. If the user finishes inputting a number for an operation option, the program will reprint the list of operation numbers and an input prompt for a product operation option as long as the user does not press 7 and stops the program by pressing the stop program button in Eclipse IDE.